<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Dave&#39;s data science</title>
    <link>/post/</link>
      <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Tue, 08 Sep 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Posts</title>
      <link>/post/</link>
    </image>
    
    <item>
      <title>Quick and easy classification column (data.table)</title>
      <link>/post/quick-and-easy-classification-column-data-table/</link>
      <pubDate>Tue, 08 Sep 2020 00:00:00 +0000</pubDate>
      <guid>/post/quick-and-easy-classification-column-data-table/</guid>
      <description>


&lt;div id=&#34;quickly-add-higher-level-classification-column-to-data.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Quickly add higher-level classification column to data.&lt;/h3&gt;
&lt;p&gt;A very common use-case is to add a column to a table of data that indicates a category for each row where the category is dependent on the value of one of the table column. This task is so common it’s worth documenting here with an example. I’m a fan of &lt;code&gt;data.table&lt;/code&gt; so I’ll set up a simple example using that.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;get-the-package&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Get the package&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(data.table)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I’m going to make a table with 1000,000 randomly chosen US states then add a region column specifying which of the 5 US region each state belongs to.
This approach requires a key table. Here is such a table:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Assign states to region
W &amp;lt;- data.table(region = &amp;quot;W&amp;quot;, state = c(&amp;quot;AK&amp;quot;, &amp;quot;WA&amp;quot;, &amp;quot;OR&amp;quot;, &amp;quot;ID&amp;quot;, &amp;quot;MT&amp;quot;, &amp;quot;WY&amp;quot;, &amp;quot;CA&amp;quot;, &amp;quot;NV&amp;quot;, &amp;quot;UT&amp;quot;, &amp;quot;CO&amp;quot;))
MW &amp;lt;- data.table(region = &amp;quot;MW&amp;quot;, state = c(&amp;quot;ND&amp;quot;, &amp;quot;MN&amp;quot;, &amp;quot;WI&amp;quot;, &amp;quot;MI&amp;quot;,  &amp;quot;SD&amp;quot;, &amp;quot;NE&amp;quot;, &amp;quot;KS&amp;quot;, &amp;quot;IA&amp;quot;, &amp;quot;MO&amp;quot;, &amp;quot;IL&amp;quot;, &amp;quot;IN&amp;quot;, &amp;quot;OH&amp;quot;))
NE &amp;lt;- data.table(region = &amp;quot;NE&amp;quot;, state = c(&amp;quot;NY&amp;quot;, &amp;quot;PA&amp;quot;, &amp;quot;MD&amp;quot;, &amp;quot;VT&amp;quot;, &amp;quot;ME&amp;quot;, &amp;quot;NH&amp;quot;, &amp;quot;MA&amp;quot;, &amp;quot;RI&amp;quot;, &amp;quot;CT&amp;quot;, &amp;quot;NJ&amp;quot;))
SE &amp;lt;- data.table(region = &amp;quot;SE&amp;quot;, state = c(&amp;quot;WV&amp;quot;, &amp;quot;DE&amp;quot;, &amp;quot;DC&amp;quot;, &amp;quot;VA&amp;quot;, &amp;quot;KY&amp;quot;, &amp;quot;NC&amp;quot;, &amp;quot;TN&amp;quot;, &amp;quot;AR&amp;quot;, &amp;quot;LA&amp;quot;, &amp;quot;MS&amp;quot;, &amp;quot;AL&amp;quot;, &amp;quot;GA&amp;quot;, &amp;quot;SC&amp;quot;, &amp;quot;FL&amp;quot;))
SW &amp;lt;- data.table(region = &amp;quot;SW&amp;quot;, state = c(&amp;quot;AZ&amp;quot;, &amp;quot;NM&amp;quot;, &amp;quot;OK&amp;quot;, &amp;quot;TX&amp;quot;, &amp;quot;HI&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;data.table&lt;/code&gt; has a useful row-binding command for combining a list of tables of the same column format into a single table:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;region.key &amp;lt;- rbindlist(list(W, MW, NE, SE, SW))
## Let&amp;#39;s look at a the first 15 rows:
region.key[1:15, ]
##     region state
##  1:      W    AK
##  2:      W    WA
##  3:      W    OR
##  4:      W    ID
##  5:      W    MT
##  6:      W    WY
##  7:      W    CA
##  8:      W    NV
##  9:      W    UT
## 10:      W    CO
## 11:     MW    ND
## 12:     MW    MN
## 13:     MW    WI
## 14:     MW    MI
## 15:     MW    SD&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;make-some-test-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Make some test data&lt;/h3&gt;
&lt;p&gt;When developing, making manageable test data is really important. Here I’m making 1000,000 example rows that represent the type of data you might encounter in the wild.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Make a large set of randomly chosen states and some other random content.
random.dt &amp;lt;- data.table(state = sample(region.key$state, 1000000, replace = TRUE), other.info = sample(1:100, 1000000, replace = TRUE))
## Look at the first 15 rows:
random.dt[1:15, ]
##     state other.info
##  1:    NV         30
##  2:    NC         63
##  3:    IN         28
##  4:    MT         41
##  5:    AK         31
##  6:    WA         60
##  7:    NV         94
##  8:    ID         53
##  9:    IA        100
## 10:    NE         43
## 11:    WY         40
## 12:    AK         55
## 13:    RI         85
## 14:    AK         76
## 15:    HI         45&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;add-category&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Add category&lt;/h3&gt;
&lt;p&gt;So now we have some test data. There are many cases where it can be really useful to have a one or more categorical variable(s) for the rows. For example here I might want to know which region each state belongs to. Maybe I want to colour code a plot, or perform pivot-like grouping operations by region. So I’m going to add the region category by merging the data with the key table. The most error-proof way to do this is to have a key column in both tables. The first way I’ll show is to do this simply by having a common column name as we have here with &lt;code&gt;state&lt;/code&gt;. If we have a common name we can &lt;code&gt;merge&lt;/code&gt; using that name:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;common.name.dt &amp;lt;- merge(random.dt, region.key, by = &amp;quot;state&amp;quot;, sort=FALSE)
## Look at first 15 rows:
common.name.dt[1:15, ]
##     state other.info region
##  1:    NV         30      W
##  2:    NC         63     SE
##  3:    IN         28     MW
##  4:    MT         41      W
##  5:    AK         31      W
##  6:    WA         60      W
##  7:    NV         94      W
##  8:    ID         53      W
##  9:    IA        100     MW
## 10:    NE         43     MW
## 11:    WY         40      W
## 12:    AK         55      W
## 13:    RI         85     NE
## 14:    AK         76      W
## 15:    HI         45     SW

## success!&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;data.table&lt;/code&gt; has a very sophisticated key hashing system whereby one or more columns can be specified as the key column(s), these get hashed so that subsequent sorting, searching and merging operations are extremely fast. For an example like this, the difference is not really noticeable, but it’s a good skill to have so here goes:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;setkey(random.dt, &amp;quot;state&amp;quot;)
setkey(region.key, &amp;quot;state&amp;quot;)
## Calling merge without specifying a column will default to merging using the columns defined as the key.
common.name.dt.2 &amp;lt;- merge(random.dt, region.key, sort=FALSE)
## top 15 rows:
common.name.dt.2[1:15, ]
##     state other.info region
##  1:    AK         31      W
##  2:    AK         55      W
##  3:    AK         76      W
##  4:    AK         19      W
##  5:    AK         61      W
##  6:    AK         89      W
##  7:    AK         29      W
##  8:    AK         37      W
##  9:    AK         38      W
## 10:    AK         93      W
## 11:    AK         13      W
## 12:    AK         71      W
## 13:    AK         96      W
## 14:    AK         50      W
## 15:    AK         92      W&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s important to note that setting a key column automatically sorts the table in alphabetic or numeric order depending on the data type. This could cause errors if I’d wanted to column-bind tables and had forgotten setkey changed the order or rows. I’d suggest always using a reference column and merging tables rather than using column-binding unless you’re confident about the row order.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;using-the-category&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Using the category&lt;/h3&gt;
&lt;p&gt;It’s worth showing a quick example of using the new category column: a group operation. I’ll show the mean of the &lt;code&gt;other.info&lt;/code&gt; column grouped by region.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;region.means &amp;lt;- common.name.dt.2[, mean(other.info), by = &amp;quot;region&amp;quot;]
## Change the default returned column name from V1 to mean.value
setnames(region.means, old = &amp;quot;V1&amp;quot;, new = &amp;quot;mean.value&amp;quot;)
region.means[]
##    region mean.value
## 1:      W   50.45808
## 2:     SE   50.53943
## 3:     SW   50.56865
## 4:     NE   50.46520
## 5:     MW   50.53903&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;summary&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;There are so many times when I need to assign rows to a higher category. Best way is to keep it simple, make a key table, then merge the two tables. Once you have one or more columns of categories it’s very easy to perform sophisticated pivot-type operations on groups of rows.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Collecting Highway Bearings</title>
      <link>/post/collecting-highway-bearings/</link>
      <pubDate>Mon, 06 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/post/collecting-highway-bearings/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/rmarkdown-libs/leaflet/leaflet.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/rmarkdown-libs/leaflet/leaflet.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/rmarkdown-libs/leafletfix/leafletfix.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/rmarkdown-libs/Proj4Leaflet/proj4-compressed.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/Proj4Leaflet/proj4leaflet.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/rmarkdown-libs/rstudio_leaflet/rstudio_leaflet.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/rmarkdown-libs/leaflet-binding/leaflet.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;given-a-point-what-highway-is-it-on-and-what-direction-does-that-highway-go&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Given a point, what highway is it on and what direction does that highway go?&lt;/h3&gt;
&lt;p&gt;I’m kicking off this blog with a geospatial example. I did some work recently where I needed to know:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the nearest section of highway to a given point; and,&lt;/li&gt;
&lt;li&gt;the highways’s approximate bearing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I got this working pretty well and am repeating the crux of the solution here. As an aside, while I was doing this work I came across &lt;a href=&#34;https://geoffboeing.com/2018/07/comparing-city-street-orientations/&#34;&gt;Geoff Boeing’s beautiful post&lt;/a&gt; visualising similar aggregate directional information for 25 cities - definitely worth a look.&lt;/p&gt;
&lt;p&gt;The best approach I could think of was to use OpenStreetMap data. Firstly associate a point with it’s nearest highway ‘way’ feature. Then get the coordinates of the beginning and end of the feature and use the pair of points to define a bearing. Makes sense? OK, here we go:&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;get-the-packages&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Get the packages&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(geosphere)
library(sf)
library(leaflet)
library(osmdata)
library(data.table)
library(ggmap)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;organise-the-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Organise the data&lt;/h3&gt;
&lt;p&gt;To keep things manageable I’m going to use 4 points dotted around the Northern Quarter in Manchester (UK). I’ll put them in a data.frame:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- data.frame(ID = 1:4,
 Longitude = c(-2.232086, -2.235675, -2.233628, -2.232453),
 Latitude = c(53.484510, 53.484318, 53.484103, 53.481176), stringsAsFactors = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then I’ll convert to an &lt;code&gt;sf&lt;/code&gt; (spatial features) multi point object. I use this command over and over.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df.sf &amp;lt;- st_as_sf(df, coords = c(&amp;quot;Longitude&amp;quot;, &amp;quot;Latitude&amp;quot;), crs=4326)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The crs argument is telling st_as_sf that these coordinates are WGS84 by referencing the appropriate EPSG code 4326 (it’s a good idea to memorise that number!). This is needed later when I project the points out of latitude/longitude format and into distance-from-bottom-left format. If you’re not familiar with this concept &lt;a href=&#34;https://www.nceas.ucsb.edu/sites/default/files/2020-04/OverviewCoordinateReferenceSystems.pdf&#34;&gt;here’s a good pdf tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;visualise&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Visualise&lt;/h3&gt;
&lt;p&gt;At this point I’ll take a look at the 4 points. I’m using leaflet which works well with Blogdown.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;m &amp;lt;- leaflet(df) %&amp;gt;% addTiles() %&amp;gt;% addCircleMarkers(
  lng = ~Longitude,
  lat = ~Latitude,
    radius = 8,
    color = &amp;quot;green&amp;quot;,
    stroke = FALSE, fillOpacity = 0.9
  )
m&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:672px;height:480px;&#34; class=&#34;leaflet html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;options&#34;:{&#34;crs&#34;:{&#34;crsClass&#34;:&#34;L.CRS.EPSG3857&#34;,&#34;code&#34;:null,&#34;proj4def&#34;:null,&#34;projectedBounds&#34;:null,&#34;options&#34;:{}}},&#34;calls&#34;:[{&#34;method&#34;:&#34;addTiles&#34;,&#34;args&#34;:[&#34;//{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#34;,null,null,{&#34;minZoom&#34;:0,&#34;maxZoom&#34;:18,&#34;tileSize&#34;:256,&#34;subdomains&#34;:&#34;abc&#34;,&#34;errorTileUrl&#34;:&#34;&#34;,&#34;tms&#34;:false,&#34;noWrap&#34;:false,&#34;zoomOffset&#34;:0,&#34;zoomReverse&#34;:false,&#34;opacity&#34;:1,&#34;zIndex&#34;:1,&#34;detectRetina&#34;:false,&#34;attribution&#34;:&#34;&amp;copy; &lt;a href=\&#34;http://openstreetmap.org\&#34;&gt;OpenStreetMap&lt;\/a&gt; contributors, &lt;a href=\&#34;http://creativecommons.org/licenses/by-sa/2.0/\&#34;&gt;CC-BY-SA&lt;\/a&gt;&#34;}]},{&#34;method&#34;:&#34;addCircleMarkers&#34;,&#34;args&#34;:[[53.48451,53.484318,53.484103,53.481176],[-2.232086,-2.235675,-2.233628,-2.232453],8,null,null,{&#34;interactive&#34;:true,&#34;className&#34;:&#34;&#34;,&#34;stroke&#34;:false,&#34;color&#34;:&#34;green&#34;,&#34;weight&#34;:5,&#34;opacity&#34;:0.5,&#34;fill&#34;:true,&#34;fillColor&#34;:&#34;green&#34;,&#34;fillOpacity&#34;:0.9},null,null,null,null,null,{&#34;interactive&#34;:false,&#34;permanent&#34;:false,&#34;direction&#34;:&#34;auto&#34;,&#34;opacity&#34;:1,&#34;offset&#34;:[0,0],&#34;textsize&#34;:&#34;10px&#34;,&#34;textOnly&#34;:false,&#34;className&#34;:&#34;&#34;,&#34;sticky&#34;:true},null]}],&#34;limits&#34;:{&#34;lat&#34;:[53.481176,53.48451],&#34;lng&#34;:[-2.235675,-2.232086]}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;get-information-from-openstreetmap&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Get information from OpenStreetMap&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;opq&lt;/code&gt; query from the &lt;code&gt;osmdata&lt;/code&gt; package forms an OSM overpass filter and sends it to OSM’s servers. The result is an &lt;code&gt;osmdata&lt;/code&gt; object containing various items. The item I’m interested in is the &lt;code&gt;osm_lines&lt;/code&gt; which is a set of &lt;code&gt;sf&lt;/code&gt; linestrings. These are the way objects representing highway segments. The query has returned 44 highway segments that intersected the bounded box of our 4 points (at the time of posting).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;this.bbox &amp;lt;- st_bbox(df.sf)
osm.road.types = c(&amp;quot;motorway&amp;quot;, &amp;quot;motorway_link&amp;quot;, &amp;quot;trunk&amp;quot;, &amp;quot;trunk_link&amp;quot;, &amp;quot;primary&amp;quot;, &amp;quot;primary_link&amp;quot;, &amp;quot;secondary&amp;quot;, 
                   &amp;quot;secondary_link&amp;quot;, &amp;quot;tertiary&amp;quot;, &amp;quot;unclassified&amp;quot;, &amp;quot;residential&amp;quot;)
out &amp;lt;- opq (this.bbox) %&amp;gt;%
  add_osm_feature (key = &amp;quot;highway&amp;quot;, value = osm.road.types) %&amp;gt;%
  osmdata_sf(quiet = F)
## Issuing query to Overpass API ...
## Rate limit: 2
## Query complete!
## converting OSM data to sf format
out
## Object of class &amp;#39;osmdata&amp;#39; with:
##                  $bbox : 53.481176,-2.235675,53.48451,-2.232086
##         $overpass_call : The call submitted to the overpass API
##                  $meta : metadata including timestamp and version numbers
##            $osm_points : &amp;#39;sf&amp;#39; Simple Features Collection with 199 points
##             $osm_lines : &amp;#39;sf&amp;#39; Simple Features Collection with 44 linestrings
##          $osm_polygons : &amp;#39;sf&amp;#39; Simple Features Collection with 0 polygons
##        $osm_multilines : NULL
##     $osm_multipolygons : NULL
road.lines &amp;lt;- out$osm_lines
nrow(road.lines)
## [1] 44&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;get-candidate-closest-roads-to-points&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Get candidate closest roads to points&lt;/h3&gt;
&lt;p&gt;Before finding the closest highway segment to a point, I’ll narrow down the search by first identifying all the highway segments within a fixed distance of each point. This won’t make much difference here but does provide a big speed up when there’s thousands of highways to choose from. Also you can, if needed, put this code in a loop and grow or shrink the buffer distance until a suitable number of candidate highways are found. First step is to project the points and the road segments to a suitable coordinate reference system (for Manchester, the UK Ordnance Survay EPSG: 27700 is a good choice), apply a 50m buffer to the points, then identify which road segments intersect with this buffer.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df.sf.tf &amp;lt;- st_transform(df.sf, 27700) # OSGB 1936 British National Grid CRS
road.lines.tf &amp;lt;- st_transform(road.lines, 27700)
buffer.size &amp;lt;- 50
df.sf.tf.bf &amp;lt;- st_buffer(df.sf.tf, buffer.size)
intersected.items &amp;lt;- st_intersects(df.sf.tf.bf, road.lines.tf, sparse = F)
dim(intersected.items)
## [1]  4 44&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The dimensions show I have 4 rows, one for each of the 4 points, and 44 columns, one for each OSM road segment within the bounding box. The matrix contains TRUE/FALSE values where TRUE indicates a point of intersection.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;get-the-closest-road-segment&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Get the closest road segment&lt;/h3&gt;
&lt;p&gt;So now, using the location of TRUE values in each row or the &lt;code&gt;intersected.items&lt;/code&gt; matrix, I can subset the &lt;code&gt;road.lines&lt;/code&gt; so that the nearest highway search is constrained to a much smaller number of highway segments (ones within 50m).
The &lt;code&gt;st_coordinates&lt;/code&gt; function is useful to return just the coordinate information from an &lt;code&gt;sf&lt;/code&gt; object, and the &lt;code&gt;dist2Line&lt;/code&gt; function from the &lt;code&gt;geosphere&lt;/code&gt; package calculates the shortest distance between a point and a polyline (There are some good details about doing this type of calculation at the &lt;a href=&#34;https://www.movable-type.co.uk/scripts/latlong.html&#34;&gt;Movable Type website&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;number.of.point &amp;lt;- nrow(intersected.items)
distances.vect &amp;lt;- matrix(NA_real_, nrow = nrow(df.sf.tf), ncol = 4)
colnames(distances.vect) &amp;lt;- c(&amp;quot;distance&amp;quot;, &amp;quot;lon&amp;quot;, &amp;quot;lat&amp;quot;, &amp;quot;ID&amp;quot;)
for (i in seq_len(number.of.point)) {
  # Out of all 44 road segments, get the index of the ones that are within 50m of point i. 
  original.road.idx &amp;lt;- which(intersected.items[i, ] == TRUE)
  distances.vect.temp  &amp;lt;- dist2Line(p = st_coordinates(df.sf[i, ]), line = as_Spatial(road.lines[original.road.idx, ]))
  distances.vect.temp[1, &amp;quot;ID&amp;quot;] &amp;lt;- original.road.idx[distances.vect.temp[1, &amp;quot;ID&amp;quot;]]
  distances.vect[i, ] &amp;lt;- distances.vect.temp
}
distances.vect
##      distance       lon      lat ID
## [1,] 5.061288 -2.232137 53.48448 43
## [2,] 3.500525 -2.235712 53.48430 10
## [3,] 6.111912 -2.233558 53.48407  5
## [4,] 5.541079 -2.232491 53.48122 19&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So now I’ve got the nearest road segments &lt;em&gt;and&lt;/em&gt; the coordinates of the nearest point on the road segments to the original points. These are stored in the lon/lat columns of &lt;code&gt;distances.vec&lt;/code&gt;. So the original vague points are now &lt;em&gt;snapped&lt;/em&gt; to actual highway locations which is a bonus.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;get-the-road-section-bearings&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Get the road section bearings&lt;/h3&gt;
&lt;p&gt;Next I’ll extract the chosen 4 road segments from the full set of 44 and add the useful features I’ve just created so far. Getting the coordinates of the first and last points is a bit fiddly. I’m using &lt;code&gt;data.table&lt;/code&gt; for this. When retrieving the coordinates via &lt;code&gt;st_coordinates&lt;/code&gt; a third column labelled &lt;code&gt;L1&lt;/code&gt; is created with a group ID of each polyline object. This can be used as a grouping variable in data.table. The &lt;code&gt;.SD[...]&lt;/code&gt; syntax holds the sub-data.table once the full data.table has been split by the grouping variable, finally 1 and &lt;code&gt;.N&lt;/code&gt; are the first row and last row of each sub-data.table. There’s other ways to do this but the speed of &lt;code&gt;data.table&lt;/code&gt; would pay off if I had thousands of points.
Once we have the beginning and end coordinate pairs it’s straightforward to call the &lt;code&gt;bearing&lt;/code&gt; function from the &lt;code&gt;geosphere&lt;/code&gt; package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;out &amp;lt;- road.lines[as.integer(distances.vect[, &amp;quot;ID&amp;quot;]), ]
out$dist.to.nearest &amp;lt;- distances.vect[, &amp;quot;distance&amp;quot;]
out$snap.lat &amp;lt;- distances.vect[, &amp;quot;lat&amp;quot;]
out$snap.lon &amp;lt;- distances.vect[, &amp;quot;lon&amp;quot;]
matching.road.lines.coords &amp;lt;- data.table::as.data.table(st_coordinates(out))
matching.road.lines.coords.begin &amp;lt;- as.matrix(matching.road.lines.coords[, .SD[1, .(X, Y)], by = &amp;quot;L1&amp;quot;][, L1 := NULL])
matching.road.lines.coords.end &amp;lt;- as.matrix(matching.road.lines.coords[, .SD[.N, .(X, Y)], by = &amp;quot;L1&amp;quot;][, L1 := NULL])
matching.road.lines.bearing &amp;lt;- bearing(matching.road.lines.coords.begin, matching.road.lines.coords.end)
out$bearing &amp;lt;- (matching.road.lines.bearing + 360) %% 360
out$bearing
## [1] 133.2409 316.6075 217.5574 258.1974&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;plot-with-estimated-bearing&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Plot with estimated bearing&lt;/h3&gt;
&lt;p&gt;In order to visualise the estimated road bearing for my 4 points I need to add arrow endpoints information. Some trigonometry wil accomplish this (the 0.00025 value is determines the length of the direction arrow):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;out$delta.x &amp;lt;- sin((pi*out$bearing) / 180) * 0.00025
out$delta.y &amp;lt;- cos((pi*out$bearing) / 180) * 0.00025&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now I can plot the snapped locations &lt;em&gt;and&lt;/em&gt; show an arrow indicating the highway bearing over a basemap which is not only pretty but allows for a quick visual validation.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# A handcoded bounding box for tile retrieval. A function to make this would be a nice addition.
n.quarter.bb &amp;lt;- c(left = -2.236, bottom = 53.48, right = -2.23, top = 53.485)
n.quarter &amp;lt;- get_stamenmap(bbox = n.quarter.bb, zoom = 18, messaging = FALSE)
ggmap(n.quarter) + 
  geom_point(data = out, aes(x=snap.lon, y=snap.lat), colour = &amp;quot;darkgreen&amp;quot;, size = 4) +
  geom_segment(data = out, aes(x=snap.lon, y=snap.lat, xend = snap.lon + delta.x, yend = snap.lat + delta.y), colour = &amp;quot;darkgreen&amp;quot;, arrow = arrow(length = unit(0.2,&amp;quot;cm&amp;quot;)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-07-06-collecting-highway-bearings_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;summary&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;The results are pretty good, definitely good enough to classify a point into one of the 8 compass bearing directions: N, NE, E… etc. In this post I’ve explored working with &lt;code&gt;sf&lt;/code&gt; spatial points, generated and run an OSM overpass filter, and done some useful visualisation with &lt;code&gt;Leaflet&lt;/code&gt; and &lt;code&gt;ggmap&lt;/code&gt;. I’m sure there are things I could tidy and optimise here but I hope you found this a little useful.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
